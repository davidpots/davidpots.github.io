I"≥#<p>This tutorial shows how you have multiple connected models that are nested. Specifically, you have a Project which has many ProjectTodos, each of which has many ProjectTodoComments. All of the above appear on the same page (you can view a project, and add Todos, and comment on each Todo).</p>

<p>Note that this is my write-up walking myself through the steps on <a href="http://trevan.co/connecting-models-in-rails-part-2/">this post by Trevan Hetzel</a>.</p>

<h3 id="1-setup-your-rails-app--database">1. Setup your Rails app &amp; database</h3>

<p>Get things started by running these commands. This will create an app, change into that app‚Äôs directory, create the database, and start the Rails server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails new projectapp
cd projectapp
rake db:create
rails s
</code></pre></div></div>

<p>You can now visit the live app by going to http://localhost:3000/ ‚Äì which will return the default Rails index page. That‚Äôs fine for now.</p>

<h3 id="2-setup-scaffolding-for-projects">2. Setup Scaffolding for ‚ÄúProjects‚Äù</h3>
<p>First we‚Äôll need scaffolding for Projects in our app. This will create the MVC stuff needed for our purposes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate scaffold Project title:string
</code></pre></div></div>

<p>You‚Äôll see the list of stuff Rails created as a result. Next, run a database migration so the database is updated with the details for Projects (they currently only have a ‚Äútitle‚Äù that is a string).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rake db:migrate
</code></pre></div></div>

<p>You can now create a new Project by visiting http://localhost:3000/projects. Go ahead and create a few Projects.</p>

<h3 id="3-setup-scaffolding-for-todos-and-comments">3. Setup Scaffolding for ‚ÄúTodos‚Äù and ‚ÄúComments‚Äù</h3>

<p>Next, you‚Äôll repeat the procedure in the previous step and create scaffolding for Todos (which belong to Projects) and Comments (which belong to Todo items within a Project). Do this as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate scaffold ProjectTodo title:string project_id:integer
rake db:migrate

rails generate scaffold ProjectTodoComment comment:string project_todo_id:integer
rake db:migrate
</code></pre></div></div>

<p>Before we create any todos or comments, we first need to setup the associations.</p>

<h3 id="4-setup-model-associations">4. Setup Model Associations</h3>

<p>Let‚Äôs rig our models so that they understand the relationship to each other we want them to have. Specifically, a Project can have many todo items; a todo item can have many comments. Said another way, comments belong to todo items, and todo items belong to projects.</p>

<p>In our <em>app/models/</em> directory we‚Äôll want to update the following files to look as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># project.rb

class Project &lt; ActiveRecord::Base
  attr_accessible :title
  has_many :project_todos
end
</code></pre></div></div>

<p>and</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># project_todo.rb

class ProjectTodo &lt; ActiveRecord::Base
  attr_accessible :project_id, :title
  belongs_to :project
  has_many :project_todo_comments
end
</code></pre></div></div>

<p>and</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># project_todo_comment.rb

class ProjectTodoComment &lt; ActiveRecord::Base
  attr_accessible :comment, :project_todo_id
  belongs_to :project_todo
end
</code></pre></div></div>

<h3 id="5-add-todo-form-to-projectshow-page">5. Add Todo Form to Project#Show page</h3>

<p>You know, so a user could be viewing a project and then add a todo item. Which is how it‚Äôd likely happen in real life. Add the following to your project ‚Äúshow‚Äù page:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;%= form_for @project_todo do |f| %&gt;
    &lt;%= f.hidden_field :project_id, :value =&gt; @project.id %&gt;
    &lt;strong&gt;&lt;%= f.label :title, 'Todo' %&gt;:&lt;/strong&gt;
    &lt;%= f.text_field :title %&gt;
    &lt;%= f.submit 'Add Todo' %&gt;
&lt;% end %&gt;
</code></pre></div></div>

<p>But before this can work (the page will render an error if you load it), we need to tell the Project controller what @project_todo is. Add this to your Project controller in the ‚Äúshow‚Äù method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@project_todo = ProjectTodo.new
</code></pre></div></div>

<p>Now, you can view a Project#Show page and add a todo! However, a few things aren‚Äôt ideal. First, after entering a new todo you‚Äôre dumped out to the ProjectTodo#show page instead of the Project#Show page. Second, when returning to the Project#Show page, we don‚Äôt see any of that Project‚Äôs todo items. We‚Äôll fix both of these in reverse order.</p>

<h3 id="6-show-a-projects-todos-on-a-projectshow-page">6. Show a Project‚Äôs Todos on a Project#Show page</h3>

<p>Quite simply, on Project#Show we tell the view to loop through each of that Project‚Äôs todos, and display the title. This is done as follows (added to Project#Show).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;% @project.project_todos.each do |todo| %&gt;
  &lt;%= todo.title %&gt;&lt;br /&gt;
&lt;% end %&gt;
</code></pre></div></div>

<p>So far, so good. But what about adding comments to todo items? That is next.</p>

<h3 id="7-add-todocomment-form-to-projectshow-page">7. Add TodoComment Form to Project#Show page</h3>

<p>The user should be able to add a comment under each Todo item. We‚Äôll use the same loop from the prior step to do this. Go through each Todo item, and display a form under it that lets a user add a comment for that item.</p>

<p>First, we add this to the ‚Äúshow‚Äù method in the Project controller:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@project_todo_comment = ProjectTodoComment.new
</code></pre></div></div>

<p>Second, we update the loop from the prior step to look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;% @project.project_todos.each do |todo| %&gt;
  &lt;p&gt;&lt;%= todo.title %&gt;&lt;/p&gt;

  &lt;%= form_for(@project_todo_comment) do |f| %&gt;
    &lt;%= f.hidden_field :project_todo_id, :value =&gt; todo.id %&gt;
    &lt;%= f.text_area :comment %&gt;
    &lt;%= f.submit 'Add Comment' %&gt;
  &lt;% end %&gt;

  &lt;% todo.project_todo_comments.each do |comment| %&gt;
    &lt;%= comment.comment %&gt;
  &lt;% end %&gt;

&lt;% end %&gt;
</code></pre></div></div>

<p>Now we can add comments on todo items!</p>

<h3 id="8-tweaking-the-todo-post-submit-redirect">8. Tweaking the Todo post-submit redirect</h3>

<p>Finally, we want to tweak things so that whenever we enter a todo item, we are kept on the page we started on (as we‚Äôd expect). Make these changes.</p>

<p>In <code class="language-plaintext highlighter-rouge">product_todos_controller.rb#create</code>, replace</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format.html { redirect_to @project_todo, notice: 'Project todo was successfully created.' }
</code></pre></div></div>

<p>with</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format.html { redirect_to project_url(@project_todo.project_id), :notice =&gt; 'Project todo was successfully created.' }
</code></pre></div></div>

<h3 id="9-tweaking-the-todocomment-post-submit-redirect">9. Tweaking the TodoComment post-submit redirect</h3>

<p>Similar to the step above, but with one extra step. In <code class="language-plaintext highlighter-rouge">product_todo_comments_controller.rb#create</code>, add</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@parent = ProjectTodo.find(@project_todo_comment.project_todo_id)
</code></pre></div></div>

<p>and then replace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format.html { redirect_to @project_todo_comment, notice: 'Project todo comment was successfully created.' }
</code></pre></div></div>

<p>with</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format.html { redirect_to project_url(@parent.project_id), notice: 'Project todo comment was successfully created.' }
</code></pre></div></div>

<h3 id="10-all-done">10. All done!</h3>

<p>The end. I hope this was helpful.</p>
:ET